preProcess = c("center","scale"),
tuneGrid=data.frame(.ncomp=seq(1:50)),
trControl=trainControl(method="repeatedcv", repeats=10,number=10))
PLSTune
PLSTune<-train(y=y_train,
x=x_train,
method="pls",
preProcess = c("center","scale"),
tuneGrid=data.frame(.ncomp=seq(1:50)),
trControl=trainControl(method="repeatedcv", repeats=10,number=5))
PLSTune
PLSTune<-train(y=y_train,
x=x_train,
method="pls",
preProcess = c("center","scale"),
tuneGrid=data.frame(.ncomp=seq(1:50)),
trControl=trainControl(method="repeatedcv", repeats=10,number=5))
PLSTune
y_pred.pls = predict(PLSTune, as.matrix(x_test))
y_train.pls = predict(PLSTune, as.matrix(x_train))
y_pred <- data.frame(Id = 1461:2919 , SalePrice = exp(y_pred.pls))
y_pred_train <- data.frame(Id = setdiff(1:1460, c(524,692,1183,1299)),
SalePrice = exp(y_train.pls))
write.csv(y_pred, file="pls_test_fm2.csv", row.names = FALSE)
write.csv(y_pred_train, file="pls_train_fm2.csv", row.names = FALSE)
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/stacking")
library(glmnet)
pls_train <- read.csv("pls_train_fm2.csv", header = TRUE)
pls_test <- read.csv("pls_test_fm2.csv", header = TRUE)
rf_train <- read.csv("RFTrainPred.csv", header = TRUE)
rf_test <- read.csv("RFTestPred.csv", header = TRUE)
xgb_train <- read.csv("xgboost_train_fm2.csv", header = TRUE)
xgb_test <- read.csv("xgboost_test_fm2.csv", header = TRUE)
elastic <- read.csv("el-EMG-pred-CV-ALL.csv", header = TRUE)
elastic_train <- elastic[1:1460,]
elastic_test <- elastic[1461:2919,]
ridge_train <- read.csv("ridge_train_fm2.csv", header=TRUE,sep="\t")
ridge_test <- read.csv("ridge_test_fm2.csv", header=TRUE,sep="\t")
x_train <- data.frame(pls = pls_train$SalePrice[pls_train$Id %in% xgb_train$Id],
#rf = rf_train$SalePrice[rf_train$Id %in% xgb_train$Id],
xgb = xgb_train$SalePrice,
ridge = ridge_train$SalePrice)
x_train <- log(x_train)
x_test <- data.frame(pls = pls_test$SalePrice[pls_test$Id %in% xgb_test$Id],
#rf = rf_test$SalePrice[rf_test$Id %in% xgb_test$Id],
xgb = xgb_test$SalePrice,
ridge = ridge_test$SalePrice)
x_test <- log(x_test)
df <- read.csv("featureMat_v2.csv", header = TRUE, stringsAsFactors = FALSE)
y_train = df$SalePrice[df$Train == 1]
glmnet_cv <- cv.glmnet(x=as.matrix(x_train), y=y_train,alpha=0)
lasso_fit <- glmnet(x=as.matrix(x_train), y=y_train, alpha=0, lambda = glmnet_cv$lambda.1se)
lasso_fit$beta
plot(predict(lasso_fit,as.matrix(x_train)), y_train)
abline(a=0,b=1,col="red")
y_pred <- data.frame(Id = 1461:2919,
SalePrice = exp(predict(lasso_fit, as.matrix(x_test))))
colnames(y_pred) <- c("Id", "SalePrice")
write.csv(y_pred, file="stacking_lasso.csv", row.names = FALSE)
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/xgboost_tune")
library(caret)
library(xgboost)
df <- read.csv("featureMat_v2.csv", header = TRUE, stringsAsFactors = FALSE)
x_train = df[df$Train == 1, 3:ncol(df)]
x_test = df[df$Train == 0, 3:ncol(df)]
y_train = df$SalePrice[df$Train == 1]
dtrain = xgb.DMatrix(as.matrix(x_train), label = y_train)
dtest = xgb.DMatrix(as.matrix(x_test))
xgb_params = list(
booster = 'gbtree',
#objective = 'reg:linear',
colsample_bytree=0.6,
eta=0.005,
max_depth=8,
min_child_weight=2,
#alpha=0.3,
#lambda=0.4,
gamma=0.01, # less overfit
subsample=0.5,
silent=TRUE)
bst = xgb.train(xgb_params,dtrain, nrounds = 10000)
y_pred.xgb = predict(bst, dtest)
y_train.xgb = predict(bst, dtrain)
y_pred <- data.frame(Id = 1461:2919 , SalePrice = exp(y_pred.xgb))
y_pred_train <- data.frame(Id = setdiff(1:1460, c(524,692,1183,1299)),
SalePrice = exp(y_train.xgb))
write.csv(y_pred, file="xgboost_test_fm2.csv", row.names = FALSE)
write.csv(y_pred_train, file="xgboost_train_fm2.csv", row.names = FALSE)
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/stacking")
library(glmnet)
pls_train <- read.csv("pls_train_fm2.csv", header = TRUE)
pls_test <- read.csv("pls_test_fm2.csv", header = TRUE)
rf_train <- read.csv("RFTrainPred.csv", header = TRUE)
rf_test <- read.csv("RFTestPred.csv", header = TRUE)
xgb_train <- read.csv("xgboost_train_fm2_newtune.csv", header = TRUE)
xgb_test <- read.csv("xgboost_test_fm2_newtune.csv", header = TRUE)
elastic <- read.csv("el-EMG-pred-CV-ALL.csv", header = TRUE)
elastic_train <- elastic[1:1460,]
elastic_test <- elastic[1461:2919,]
ridge_train <- read.csv("ridge_train_fm2.csv", header=TRUE,sep="\t")
ridge_test <- read.csv("ridge_test_fm2.csv", header=TRUE,sep="\t")
x_train <- data.frame(pls = pls_train$SalePrice[pls_train$Id %in% xgb_train$Id],
#rf = rf_train$SalePrice[rf_train$Id %in% xgb_train$Id],
xgb = xgb_train$SalePrice,
ridge = ridge_train$SalePrice)
x_train <- log(x_train)
x_test <- data.frame(pls = pls_test$SalePrice[pls_test$Id %in% xgb_test$Id],
#rf = rf_test$SalePrice[rf_test$Id %in% xgb_test$Id],
xgb = xgb_test$SalePrice,
ridge = ridge_test$SalePrice)
x_test <- log(x_test)
df <- read.csv("featureMat_v2.csv", header = TRUE, stringsAsFactors = FALSE)
y_train = df$SalePrice[df$Train == 1]
#y_train <- exp(y_train)
glmnet_cv <- cv.glmnet(x=as.matrix(x_train), y=y_train,alpha=0)
lasso_fit <- glmnet(x=as.matrix(x_train), y=y_train, alpha=0, lambda = glmnet_cv$lambda.1se)
lasso_fit$beta
plot(predict(lasso_fit,as.matrix(x_train)), y_train)
abline(a=0,b=1,col="red")
y_pred <- data.frame(Id = 1461:2919,
SalePrice = exp(predict(lasso_fit, as.matrix(x_test))))
colnames(y_pred) <- c("Id", "SalePrice")
write.csv(y_pred, file="stacking_lasso.csv", row.names = FALSE)
?cv.glmnet
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/xgboost_tune")
library(caret)
library(xgboost)
df <- read.csv("featureMat_v2.csv", header = TRUE, stringsAsFactors = FALSE)
x_train = df[df$Train == 1, 3:ncol(df)]
x_test = df[df$Train == 0, 3:ncol(df)]
y_train = df$SalePrice[df$Train == 1]
dtrain = xgb.DMatrix(as.matrix(x_train), label = y_train)
dtest = xgb.DMatrix(as.matrix(x_test))
xgb_params = list(
booster = 'gbtree',
#objective = 'reg:linear',
colsample_bytree=0.6,
eta=0.005,
max_depth=8,
min_child_weight=2,
#alpha=0.3,
#lambda=0.4,
gamma=0.01, # less overfit
subsample=0.5,
silent=TRUE)
bst = xgb.train(xgb_params,dtrain, nrounds = 4000)
y_pred.xgb = predict(bst, dtest)
y_train.xgb = predict(bst, dtrain)
y_pred <- data.frame(Id = 1461:2919 , SalePrice = exp(y_pred.xgb))
y_pred_train <- data.frame(Id = setdiff(1:1460, c(524,692,1183,1299)),
SalePrice = exp(y_train.xgb))
write.csv(y_pred, file="xgboost_test_fm2.csv", row.names = FALSE)
write.csv(y_pred_train, file="xgboost_train_fm2.csv", row.names = FALSE)
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/stacking")
library(glmnet)
pls_train <- read.csv("pls_train_fm2.csv", header = TRUE)
pls_test <- read.csv("pls_test_fm2.csv", header = TRUE)
rf_train <- read.csv("RFTrainPred.csv", header = TRUE)
rf_test <- read.csv("RFTestPred.csv", header = TRUE)
xgb_train <- read.csv("xgboost_train_fm2_newtune1.csv", header = TRUE)
xgb_test <- read.csv("xgboost_test_fm2_newtune1.csv", header = TRUE)
elastic <- read.csv("el-EMG-pred-CV-ALL.csv", header = TRUE)
elastic_train <- elastic[1:1460,]
elastic_test <- elastic[1461:2919,]
ridge_train <- read.csv("ridge_train_fm2.csv", header=TRUE,sep="\t")
ridge_test <- read.csv("ridge_test_fm2.csv", header=TRUE,sep="\t")
x_train <- data.frame(pls = pls_train$SalePrice[pls_train$Id %in% xgb_train$Id],
#rf = rf_train$SalePrice[rf_train$Id %in% xgb_train$Id],
xgb = xgb_train$SalePrice,
ridge = ridge_train$SalePrice)
x_train <- log(x_train)
x_test <- data.frame(pls = pls_test$SalePrice[pls_test$Id %in% xgb_test$Id],
#rf = rf_test$SalePrice[rf_test$Id %in% xgb_test$Id],
xgb = xgb_test$SalePrice,
ridge = ridge_test$SalePrice)
x_test <- log(x_test)
df <- read.csv("featureMat_v2.csv", header = TRUE, stringsAsFactors = FALSE)
y_train = df$SalePrice[df$Train == 1]
#y_train <- exp(y_train)
glmnet_cv <- cv.glmnet(x=as.matrix(x_train), y=y_train,alpha=0)
lasso_fit <- glmnet(x=as.matrix(x_train), y=y_train, alpha=0, lambda = glmnet_cv$lambda.1se)
lasso_fit$beta
plot(predict(lasso_fit,as.matrix(x_train)), y_train)
abline(a=0,b=1,col="red")
y_pred <- data.frame(Id = 1461:2919,
SalePrice = exp(predict(lasso_fit, as.matrix(x_test))))
colnames(y_pred) <- c("Id", "SalePrice")
write.csv(y_pred, file="stacking_lasso.csv", row.names = FALSE)
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/stacking")
library(glmnet)
pls_train <- read.csv("pls_train_fm2.csv", header = TRUE)
pls_test <- read.csv("pls_test_fm2.csv", header = TRUE)
rf_train <- read.csv("RFTrainPred.csv", header = TRUE)
rf_test <- read.csv("RFTestPred.csv", header = TRUE)
xgb_train <- read.csv("xgboost_train_fm2_newtune.csv", header = TRUE)
xgb_test <- read.csv("xgboost_test_fm2_newtune.csv", header = TRUE)
elastic <- read.csv("el-EMG-pred-CV-ALL.csv", header = TRUE)
elastic_train <- elastic[1:1460,]
elastic_test <- elastic[1461:2919,]
ridge_train <- read.csv("ridge_train_fm2.csv", header=TRUE,sep="\t")
ridge_test <- read.csv("ridge_test_fm2.csv", header=TRUE,sep="\t")
x_train <- data.frame(pls = pls_train$SalePrice[pls_train$Id %in% xgb_train$Id],
#rf = rf_train$SalePrice[rf_train$Id %in% xgb_train$Id],
xgb = xgb_train$SalePrice,
ridge = ridge_train$SalePrice)
x_train <- log(x_train)
x_test <- data.frame(pls = pls_test$SalePrice[pls_test$Id %in% xgb_test$Id],
#rf = rf_test$SalePrice[rf_test$Id %in% xgb_test$Id],
xgb = xgb_test$SalePrice,
ridge = ridge_test$SalePrice)
x_test <- log(x_test)
df <- read.csv("featureMat_v2.csv", header = TRUE, stringsAsFactors = FALSE)
y_train = df$SalePrice[df$Train == 1]
#y_train <- exp(y_train)
head(df)
df$SalePrice
df$SalePrice[2000,]
df$SalePrice[2000]
setwd("~/Documents/KaggleAmesHouse/xgboost_tune")
df$xgb_pred <- c(xgb_train$SalePrice, xgb_test$SalePrice)
df$pls_pred <- c(pls_train$SalePrice, pls_test$SalePrice)
df$ridge_pred <- c(ridge_train$SalePrice, ridge_test$SalePrice)
write.csv(df, "featureMat_v4.csv", row.names = FALSE)
setwd("~/Documents/KaggleAmesHouse/xgboost_tune")
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/xgboost_tune")
library(caret)
library(xgboost)
df <- read.csv("featureMat_v2.csv", header = TRUE, stringsAsFactors = FALSE)
x_train = df[df$Train == 1, 3:ncol(df)]
x_test = df[df$Train == 0, 3:ncol(df)]
y_train = df$SalePrice[df$Train == 1]
dtrain = xgb.DMatrix(as.matrix(x_train), label = y_train)
dtest = xgb.DMatrix(as.matrix(x_test))
xgb_params = list(
booster = 'gbtree',
#objective = 'reg:linear',
colsample_bytree=0.6,
eta=0.005,
max_depth=8,
min_child_weight=2,
#alpha=0.3,
#lambda=0.4,
gamma=0.01, # less overfit
subsample=0.5,
silent=TRUE)
bst = xgb.train(xgb_params,dtrain, nrounds = 10000)
y_pred.xgb = predict(bst, dtest)
y_train.xgb = predict(bst, dtrain)
y_pred <- data.frame(Id = 1461:2919 , SalePrice = exp(y_pred.xgb))
y_pred_train <- data.frame(Id = setdiff(1:1460, c(524,692,1183,1299)),
SalePrice = exp(y_train.xgb))
write.csv(y_pred, file="xgboost_test_fm2.csv", row.names = FALSE)
write.csv(y_pred_train, file="xgboost_train_fm2.csv", row.names = FALSE)
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/xgboost_tune")
library(caret)
library(glmnet)
df <- read.csv("featureMat_v4.csv", header = TRUE, stringsAsFactors = FALSE)
x_train = df[df$Train == 1, 3:ncol(df)]
x_test = df[df$Train == 0, 3:ncol(df)]
y_train = df$SalePrice[df$Train == 1]
glmnet_cv <- cv.glmnet(x = as.matrix(x_train),y = y_train, alpha=0.1)
glmnet_cv
ridge_fit <- glmnet(x = as.matrix(x_train),y = y_train, alpha=0.1, lambda = glmnet_cv$lambda.1se)
glmnet_cv <- cv.glmnet(x = as.matrix(x_train),y = y_train, alpha=0.1)
ridge_fit <- glmnet(x = as.matrix(x_train),y = y_train, alpha=0.1, lambda = glmnet_cv$lambda.1se)
y_pred.glmnet = predict(ridge_fit, as.matrix(x_test))
y_train.glmnet = predict(ridge_fit, as.matrix(x_train))
y_pred <- data.frame(Id = 1461:2919 , SalePrice = exp(y_pred.glmnet))
y_pred_train <- data.frame(Id = setdiff(1:1460, c(524,692,1183,1299)),
SalePrice = exp(y_train.glmnet))
write.csv(y_pred, file="ridge_test_fm4.csv", row.names = FALSE)
write.csv(y_pred_train, file="ridge_train_fm4.csv", row.names = FALSE)
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/xgboost_tune")
library(caret)
library(glmnet)
df <- read.csv("featureMat_v4.csv", header = TRUE, stringsAsFactors = FALSE)
x_train = df[df$Train == 1, 3:ncol(df)]
x_test = df[df$Train == 0, 3:ncol(df)]
y_train = df$SalePrice[df$Train == 1]
set.seed(602)
PLSTune<-train(y=y_train,
x=x_train,
method="pls",
preProcess = c("center","scale"),
tuneGrid=data.frame(.ncomp=seq(1:50)),
trControl=trainControl(method="repeatedcv", repeats=10,number=5))
PLSTune
y_pred.pls = predict(PLSTune, as.matrix(x_test))
y_train.pls = predict(PLSTune, as.matrix(x_train))
y_pred <- data.frame(Id = 1461:2919 , SalePrice = exp(y_pred.pls))
y_pred_train <- data.frame(Id = setdiff(1:1460, c(524,692,1183,1299)),
SalePrice = exp(y_train.pls))
write.csv(y_pred, file="pls_test_fm4.csv", row.names = FALSE)
write.csv(y_pred_train, file="pls_train_fm4.csv", row.names = FALSE)
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/stacking")
library(glmnet)
pls_train <- read.csv("pls_train_fm4.csv", header = TRUE)
pls_test <- read.csv("pls_test_fm4.csv", header = TRUE)
rf_train <- read.csv("RFTrainPred.csv", header = TRUE)
rf_test <- read.csv("RFTestPred.csv", header = TRUE)
xgb_train <- read.csv("xgboost_train_fm2_newtune.csv", header = TRUE)
xgb_test <- read.csv("xgboost_test_fm2_newtune.csv", header = TRUE)
elastic <- read.csv("el-EMG-pred-CV-ALL.csv", header = TRUE)
elastic_train <- elastic[1:1460,]
elastic_test <- elastic[1461:2919,]
ridge_train <- read.csv("ridge_train_fm4.csv", header=TRUE,sep="\t")
ridge_test <- read.csv("ridge_test_fm4.csv", header=TRUE,sep="\t")
x_train <- data.frame(pls = pls_train$SalePrice[pls_train$Id %in% xgb_train$Id],
#rf = rf_train$SalePrice[rf_train$Id %in% xgb_train$Id],
xgb = xgb_train$SalePrice,
ridge = ridge_train$SalePrice)
x_train <- log(x_train)
x_test <- data.frame(pls = pls_test$SalePrice[pls_test$Id %in% xgb_test$Id],
#rf = rf_test$SalePrice[rf_test$Id %in% xgb_test$Id],
xgb = xgb_test$SalePrice,
ridge = ridge_test$SalePrice)
x_test <- log(x_test)
df <- read.csv("featureMat_v2.csv", header = TRUE, stringsAsFactors = FALSE)
y_train = df$SalePrice[df$Train == 1]
#y_train <- exp(y_train)
glmnet_cv <- cv.glmnet(x=as.matrix(x_train), y=y_train,alpha=0)
lasso_fit <- glmnet(x=as.matrix(x_train), y=y_train, alpha=0, lambda = glmnet_cv$lambda.1se)
lasso_fit$beta
ridge_train <- read.csv("ridge_train_fm4.csv", header=TRUE)
ridge_test <- read.csv("ridge_test_fm4.csv", header=TRUE)
x_train <- data.frame(pls = pls_train$SalePrice[pls_train$Id %in% xgb_train$Id],
#rf = rf_train$SalePrice[rf_train$Id %in% xgb_train$Id],
xgb = xgb_train$SalePrice,
ridge = ridge_train$SalePrice)
head(ridge_train )
setwd("~/Documents/KaggleAmesHouse/stacking")
ridge_train <- read.csv("ridge_train_fm4.csv", header=TRUE,sep="\t")
ridge_test <- read.csv("ridge_test_fm4.csv", header=TRUE,sep="\t")
x_train <- data.frame(pls = pls_train$SalePrice[pls_train$Id %in% xgb_train$Id],
#rf = rf_train$SalePrice[rf_train$Id %in% xgb_train$Id],
xgb = xgb_train$SalePrice,
ridge = ridge_train$SalePrice)
x_train <- log(x_train)
x_test <- data.frame(pls = pls_test$SalePrice[pls_test$Id %in% xgb_test$Id],
#rf = rf_test$SalePrice[rf_test$Id %in% xgb_test$Id],
xgb = xgb_test$SalePrice,
ridge = ridge_test$SalePrice)
x_test <- log(x_test)
df <- read.csv("featureMat_v2.csv", header = TRUE, stringsAsFactors = FALSE)
y_train = df$SalePrice[df$Train == 1]
#y_train <- exp(y_train)
glmnet_cv <- cv.glmnet(x=as.matrix(x_train), y=y_train,alpha=0)
lasso_fit <- glmnet(x=as.matrix(x_train), y=y_train, alpha=0, lambda = glmnet_cv$lambda.1se)
lasso_fit$beta
plot(predict(lasso_fit,as.matrix(x_train)), y_train)
abline(a=0,b=1,col="red")
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/stacking")
library(glmnet)
pls_train <- read.csv("pls_train_fm4.csv", header = TRUE)
pls_test <- read.csv("pls_test_fm4.csv", header = TRUE)
rf_train <- read.csv("RFTrainPred.csv", header = TRUE)
rf_test <- read.csv("RFTestPred.csv", header = TRUE)
xgb_train <- read.csv("xgboost_train_fm2_newtune.csv", header = TRUE)
xgb_test <- read.csv("xgboost_test_fm2_newtune.csv", header = TRUE)
elastic <- read.csv("el-EMG-pred-CV-ALL.csv", header = TRUE)
elastic_train <- elastic[1:1460,]
elastic_test <- elastic[1461:2919,]
ridge_train <- read.csv("ridge_train_fm4.csv", header=TRUE,sep="\t")
ridge_test <- read.csv("ridge_test_fm4.csv", header=TRUE,sep="\t")
x_train <- data.frame(pls = pls_train$SalePrice[pls_train$Id %in% xgb_train$Id],
#rf = rf_train$SalePrice[rf_train$Id %in% xgb_train$Id],
xgb = xgb_train$SalePrice,
ridge = ridge_train$SalePrice)
x_train <- log(x_train)
x_test <- data.frame(pls = pls_test$SalePrice[pls_test$Id %in% xgb_test$Id],
#rf = rf_test$SalePrice[rf_test$Id %in% xgb_test$Id],
xgb = xgb_test$SalePrice,
ridge = ridge_test$SalePrice)
x_test <- log(x_test)
df <- read.csv("featureMat_v2.csv", header = TRUE, stringsAsFactors = FALSE)
y_train = df$SalePrice[df$Train == 1]
#y_train <- exp(y_train)
glmnet_cv <- cv.glmnet(x=as.matrix(x_train), y=y_train,alpha=0)
lasso_fit <- glmnet(x=as.matrix(x_train), y=y_train, alpha=0, lambda = glmnet_cv$lambda.1se)
lasso_fit$beta
plot(predict(lasso_fit,as.matrix(x_train)), y_train)
abline(a=0,b=1,col="red")
y_pred <- data.frame(Id = 1461:2919,
SalePrice = exp(predict(lasso_fit, as.matrix(x_test))))
colnames(y_pred) <- c("Id", "SalePrice")
write.csv(y_pred, file="stacking_pred_in_featuremat.csv", row.names = FALSE)
plot(pls_train$SalePrice, y_train)
plot(log(pls_train$SalePrice), y_train)
df <- read.csv("featureMat_v4.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(df)
df[,-"xgb_pred"]
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/xgboost_tune")
library(caret)
library(glmnet)
df <- read.csv("featureMat_v4.csv", header = TRUE, stringsAsFactors = FALSE)
df <- df[,-167]
glmnet_cv <- cv.glmnet(x = as.matrix(x_train),y = y_train, alpha=0.1)
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/xgboost_tune")
library(caret)
library(glmnet)
df <- read.csv("featureMat_v4.csv", header = TRUE, stringsAsFactors = FALSE)
df <- df[,-167]
x_train = df[df$Train == 1, 3:ncol(df)]
x_test = df[df$Train == 0, 3:ncol(df)]
y_train = df$SalePrice[df$Train == 1]
set.seed(602)
glmnet_cv <- cv.glmnet(x = as.matrix(x_train),y = y_train, alpha=0.1)
glmnet_cv
ridge_fit <- glmnet(x = as.matrix(x_train),y = y_train, alpha=0.1, lambda = glmnet_cv$lambda.1se)
y_pred.glmnet = predict(ridge_fit, as.matrix(x_test))
y_train.glmnet = predict(ridge_fit, as.matrix(x_train))
y_pred <- data.frame(Id = 1461:2919 , SalePrice = exp(y_pred.glmnet))
y_pred_train <- data.frame(Id = setdiff(1:1460, c(524,692,1183,1299)),
SalePrice = exp(y_train.glmnet))
colnames(y_pred) <- c("Id", "SalePrice")
colnames(y_pred_train) <- c("Id", "SalePrice")
write.csv(y_pred, file="ridge_test_fm4.csv", row.names = FALSE)
write.csv(y_pred_train, file="ridge_train_fm4.csv", row.names = FALSE)
ridge_fit
ridge_fit$beta
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/xgboost_tune")
library(caret)
library(glmnet)
df <- read.csv("featureMat_v4.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(df)
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/xgboost_tune")
library(caret)
library(glmnet)
df <- read.csv("featureMat_v4.csv", header = TRUE, stringsAsFactors = FALSE)
df <- df[,-166]
x_train = df[df$Train == 1, 3:ncol(df)]
x_test = df[df$Train == 0, 3:ncol(df)]
y_train = df$SalePrice[df$Train == 1]
set.seed(602)
PLSTune<-train(y=y_train,
x=x_train,
method="pls",
preProcess = c("center","scale"),
tuneGrid=data.frame(.ncomp=seq(1:50)),
trControl=trainControl(method="repeatedcv", repeats=10,number=5))
PLSTune
y_pred.pls = predict(PLSTune, as.matrix(x_test))
y_train.pls = predict(PLSTune, as.matrix(x_train))
y_pred <- data.frame(Id = 1461:2919 , SalePrice = exp(y_pred.pls))
y_pred_train <- data.frame(Id = setdiff(1:1460, c(524,692,1183,1299)),
SalePrice = exp(y_train.pls))
write.csv(y_pred, file="pls_test_fm4.csv", row.names = FALSE)
write.csv(y_pred_train, file="pls_train_fm4.csv", row.names = FALSE)
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/stacking")
library(glmnet)
pls_train <- read.csv("pls_train_fm4.csv", header = TRUE)
pls_test <- read.csv("pls_test_fm4.csv", header = TRUE)
rf_train <- read.csv("RFTrainPred.csv", header = TRUE)
rf_test <- read.csv("RFTestPred.csv", header = TRUE)
xgb_train <- read.csv("xgboost_train_fm2_newtune.csv", header = TRUE)
xgb_test <- read.csv("xgboost_test_fm2_newtune.csv", header = TRUE)
elastic <- read.csv("el-EMG-pred-CV-ALL.csv", header = TRUE)
elastic_train <- elastic[1:1460,]
elastic_test <- elastic[1461:2919,]
ridge_train <- read.csv("ridge_train_fm4.csv", header=TRUE,sep="\t")
ridge_test <- read.csv("ridge_test_fm4.csv", header=TRUE,sep="\t")
x_train <- data.frame(pls = pls_train$SalePrice[pls_train$Id %in% xgb_train$Id],
#rf = rf_train$SalePrice[rf_train$Id %in% xgb_train$Id],
xgb = xgb_train$SalePrice,
ridge = ridge_train$SalePrice)
x_train <- log(x_train)
x_test <- data.frame(pls = pls_test$SalePrice[pls_test$Id %in% xgb_test$Id],
#rf = rf_test$SalePrice[rf_test$Id %in% xgb_test$Id],
xgb = xgb_test$SalePrice,
ridge = ridge_test$SalePrice)
x_test <- log(x_test)
df <- read.csv("featureMat_v2.csv", header = TRUE, stringsAsFactors = FALSE)
y_train = df$SalePrice[df$Train == 1]
#y_train <- exp(y_train)
glmnet_cv <- cv.glmnet(x=as.matrix(x_train), y=y_train,alpha=0)
lasso_fit <- glmnet(x=as.matrix(x_train), y=y_train, alpha=0, lambda = glmnet_cv$lambda.1se)
lasso_fit$beta
ridge_train <- read.csv("ridge_train_fm4.csv", header=TRUE)
ridge_test <- read.csv("ridge_test_fm4.csv", header=TRUE)
x_train <- data.frame(pls = pls_train$SalePrice[pls_train$Id %in% xgb_train$Id],
#rf = rf_train$SalePrice[rf_train$Id %in% xgb_train$Id],
xgb = xgb_train$SalePrice,
ridge = ridge_train$SalePrice)
x_train <- log(x_train)
x_test <- data.frame(pls = pls_test$SalePrice[pls_test$Id %in% xgb_test$Id],
#rf = rf_test$SalePrice[rf_test$Id %in% xgb_test$Id],
xgb = xgb_test$SalePrice,
ridge = ridge_test$SalePrice)
x_test <- log(x_test)
df <- read.csv("featureMat_v2.csv", header = TRUE, stringsAsFactors = FALSE)
y_train = df$SalePrice[df$Train == 1]
glmnet_cv <- cv.glmnet(x=as.matrix(x_train), y=y_train,alpha=0)
lasso_fit <- glmnet(x=as.matrix(x_train), y=y_train, alpha=0, lambda = glmnet_cv$lambda.1se)
lasso_fit$beta
plot(predict(lasso_fit,as.matrix(x_train)), y_train)
abline(a=0,b=1,col="red")
