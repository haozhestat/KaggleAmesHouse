set.seed(580)
Y <- rpois(n, lambda)
R <- rbinom(n, 1, p)
X <- R*Y
X
plot(hist(X, freq = TRUE), main="The histogram of X")
gibsamp_1_1 <- Gibbs_Sampler(1000,X,Y,1,1,2,0.3,R)
quantile(gibsamp_1_1[[1]], c(0.025,0.975))
quantile(gibsamp_1_1[[2]], c(0.025,0.975))
gibsamp_1_1 <- Gibbs_Sampler(1000,X,Y,1,10,2,0.3,R)
gibsamp_1_1 <- Gibbs_Sampler(10000,X,Y,1,10,2,0.3,R)
quantile(gibsamp_1_1[[1]], c(0.025,0.975))
quantile(gibsamp_1_1[[2]], c(0.025,0.975))
gibsamp_1_1 <- Gibbs_Sampler(10000,X,Y,1,1,2,0.3,R)
quantile(gibsamp_1_1[[1]], c(0.025,0.975))
quantile(gibsamp_1_1[[2]], c(0.025,0.975))
gibsamp_1_1 <- Gibbs_Sampler(10000,X,Y,10,1,2,0.3,R)
quantile(gibsamp_1_1[[1]], c(0.025,0.975))
quantile(gibsamp_1_1[[2]], c(0.025,0.975))
gibsamp_1_1 <- Gibbs_Sampler(10000,X,Y,10,10,2,0.3,R)
quantile(gibsamp_1_1[[1]], c(0.025,0.975))
quantile(gibsamp_1_1[[2]], c(0.025,0.975))
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/Haozhe")
library(randomForest)
library(xgboost)
library(caret)
library(Boruta)
library(glmnet)
train <- read.csv("train.csv", header=TRUE)
test <- read.csv("test.csv", header=TRUE)
levels(train$PoolQC)
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/Haozhe")
library(randomForest)
library(xgboost)
library(caret)
library(Boruta)
library(glmnet)
train <- read.csv("train.csv", header=TRUE)
test <- read.csv("test.csv", header=TRUE)
train <- read.csv("train.csv", header=TRUE)
test <- read.csv("test.csv", header=TRUE)
train$train <- 1
test$train <- 0
featureMat <- rbind(train, test)
colnames(test)
colnames(train)
train <- read.csv("train.csv", header=TRUE)
test <- read.csv("test.csv", header=TRUE)
train$train <- 1
train <- train[,c(82,81,1:80)]
colnames(test)
test$Train <- 0
test$SalePrice <- NA
test <- test[,c()]
colnames(test)
train <- read.csv("train.csv", header=TRUE)
test <- read.csv("test.csv", header=TRUE)
train$Train <- 1
train <- train[,c(82,81,1:80)]
test$Train <- 0
test$SalePrice <- NA
colnames(test)
train <- read.csv("train.csv", header=TRUE)
test <- read.csv("test.csv", header=TRUE)
train$Train <- 1
train <- train[,c(82,81,1:80)]
test$SalePrice <- NA
test$Train <- 0
test <- test[,c(82,81,1:80)]
featureMat <- rbind(train, test)
head(featureMat)
table(featureMat$Train)
str(featureMat)
plot(density(featureMat$Id))
plot(density(featureMat$MSSubClass))
plot(hist(featureMat$MSSubClass))
featureMat$MSSubClass <- as.factor(featureMat$MSSubClass)
plot(hist(featureMat$MSSubClass))
table(featureMat$MSSubClass)
data <- read.csv("~/Documents/simCIRF/simCIRF2_500_500.csv", header = FALSE)
apply(data, 2, quantile, c(0.025,0.975))
rm(list = ls())
library(randomForest)
library(np)
library(dplyr)
library(foreach)
library(doParallel)
mean_fun <- function(x){
return(10*sin(pi*x[1]*x[2])+20*(x[3]-0.05)^2 + 10*x[3] + 5*x[5])
}
DataGen <- function(nsize){
x <- matrix(runif(nsize*5,0,1),nsize,5)
colnames(x) <- c("x1","x2","x3","x4","x5")
error <- rnorm(nsize, 0, sqrt(10))
y <- apply(x, 1, mean_fun) + error
return(list(x=x,y=y))
}
x01 <- rep(0.6,5)
data <- read.csv("~/Documents/simCIRF/simCIRF2_500_500.csv", header = FALSE)
apply(data, 1, quantile, c(0.025,0.975))
apply(as.matrix(data), 1, quantile, c(0.025,0.975))
apply(as.matrix(data), 1, quantile,0.025)
head(data)
data <- read.csv("~/Documents/simCIRF/simCIRF2_500_500.csv", header = TRUE)
apply(as.matrix(data), 1, quantile,0.025)
apply(as.matrix(data), 1, quantile,c(0.025,0.095))
x01 <- rep(0.55,5)
x01
mean_fun(x01)
apply(as.matrix(data), 1, quantile,0.025)
mean_fun(x01)>=apply(as.matrix(data), 1, quantile,0.025)&mean_fun(x01)<=apply(as.matrix(data), 1, quantile,0.975)
mean(mean_fun(x01)>=apply(as.matrix(data), 1, quantile,0.025)&
mean_fun(x01)<=apply(as.matrix(data), 1, quantile,0.975))
empirical_coverage <- function(prob){
mean(mean_fun(x01)>=apply(as.matrix(data), 1, quantile,(1-prob)/2)&
mean_fun(x01)<=apply(as.matrix(data), 1, quantile,1-(1-prob)/2))
}
empirical_coverage(0.1)
plot(seq(0,1,0.01), sapply(seq(0,1,0.01),empirical_coverage))
abline(a=0,b=1)
install_github("swager/randomForestCI")
install.packages("devtools")
library(devtools)
install_github("swager/randomForestCI")
simData <- DataGen(1000)
rf = randomForest(simData$x,simData$y, keep.inbag = TRUE)
ij = randomForestInfJack(rf_fit, x01, calibrate = TRUE)
library(randomForestCI)
ij = randomForestInfJack(rf_fit, x01, calibrate = TRUE)
rf = randomForest(simData$x,simData$y, keep.inbag = TRUE)
ij = randomForestInfJack(rf_fit, x01, calibrate = TRUE)
ij = randomForestInfJack(rf, x01, calibrate = TRUE)
ij
mean_fun(x01)
1.96*sqrt(5.72)
summary(ij)
table(featureMat$MSSubClass)
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/Haozhe")
library(randomForest)
library(xgboost)
library(caret)
library(Boruta)
library(glmnet)
train <- read.csv("train.csv", header=TRUE)
test <- read.csv("test.csv", header=TRUE)
train$Train <- 1
train <- train[,c(82,81,1:80)]
test$SalePrice <- NA
test$Train <- 0
test <- test[,c(82,81,1:80)]
featureMat <- rbind(train, test)
###### standardize all the X's
######
table(featureMat$Train)
str(featureMat)
plot(hist(featureMat$MSSubClass))
featureMat$MSSubClass <- as.factor(featureMat$MSSubClass)
table(featureMat$MSSubClass)
table(featureMat$MSZoning)
table(featureMat$Train)
table(featureMat$LotFrontage)
table(featureMat$LotArea)
table(featureMat$Street)
table(featureMat$Alley)
featureMat$Alley
sum(is.na(featureMat$Alley))
sum(is.na(featureMat$Alley))/nrow(featureMat)
mean(is.na(featureMat$Alley))
table(featureMat$Street)
table(featureMat$LotShape)
table(featureMat$LandContour)
table(featureMat$Utilities)
sum(is.na(featureMat$Utilities))/nrow(featureMat)
str(featureMat$Utilities)
table(featureMat$LotConfig)
sum(is.na(featureMat$LotConfig))/nrow(featureMat)
table(featureMat$LandSlope)
sum(is.na(featureMat$LandSlope))/nrow(featureMat)
table(featureMat$Neighborhood)
sum(is.na(featureMat$Neighborhood))/nrow(featureMat)
table(featureMat$Condition1)
sum(is.na(featureMat$Condition1))/nrow(featureMat)
table(featureMat$Condition2)
sum(is.na(featureMat$Condition2))/nrow(featureMat)
table(featureMat$BldgType)
table(featureMat$HouseStyle)
table(featureMat$OverallQual)
table(featureMat$OverallCond)
table(featureMat$YearBuilt)
str(featureMat$YearBuilt)
table(featureMat$YearRemodAdd)
table(featureMat$RoofStyle)
table(featureMat$RoofMatl)
table(featureMat$Exterior1st)
table(featureMat$Exterior2nd)
table(featureMat$MasVnrType)
sum(is.na(featureMat$MasVnrType))/nrow(featureMat)
table(featureMat$MasVnrArea)
sum(is.na(featureMat$MasVnrArea))/nrow(featureMat)
table(featureMat$ExterQual)
table(featureMat$ExterCond)
table(featureMat$Foundation)
table(featureMat$BsmtQual)
table(featureMat$BsmtCond)
table(featureMat$BsmtExposure)
table(featureMat$BsmtFinType1)
table(featureMat$BsmtFinSF1)
table(featureMat$BsmtFinType2)
table(featureMat$BsmtFinSF2)
table(featureMat$BsmtUnfSF)
table(featureMat$TotalBsmtSF)
sum(is.na(featureMat$TotalBsmtSF))/nrow(featureMat)
sum(is.na(featureMat$TotalBsmtSF))#/nrow(featureMat)
featureMat$TotalBsmtSF == featureMat$BsmtUnfSF + featureMat$BsmtFinSF2 + featureMat$BsmtFinSF1
mean(featureMat$TotalBsmtSF == featureMat$BsmtUnfSF + featureMat$BsmtFinSF2 + featureMat$BsmtFinSF1)
mean(featureMat$TotalBsmtSF == featureMat$BsmtUnfSF + featureMat$BsmtFinSF2 + featureMat$BsmtFinSF1,na.rm=TRUE)
which(is.na(featureMat$TotalBsmtSF == featureMat$BsmtUnfSF + featureMat$BsmtFinSF2 + featureMat$BsmtFinSF1))
featureMat[2121,]
table(featureMat$Heating)
sum(is.na(featureMat$Heating))#/nrow(featureMat)
table(featureMat$HeatingQC)
table(featureMat$CentralAir)
table(featureMat$Electrical)
sum(is.na(featureMat$Electrical))#/nrow(featureMat)
table(featureMat$1stFlrSF)
table(featureMat$"1stFlrSF")
table(featureMat$stFlrSF)
colnames(feature)
colnames(featureMat)
table(featureMat$X1stFlrSF)
table(featureMat$X2ndFlrSF)
table(featureMat$LowQualFinSF)
table(featureMat$GrLivArea)
table(featureMat$BsmtFullBath)
table(featureMat$BsmtHalfBath)
table(featureMat$FullBath)
table(featureMat$HalfBath)
sum(is.na(featureMat$HalfBath))#/nrow(featureMat)
table(featureMat$Bedroom)
table(featureMat$Kitchen)
table(featureMat$Kitchen)
colnames(featuerMat)
colnames(featureMat)
table(featureMat$KitchenAbvGr)
table(featureMat$KitchenQual)
table(featureMat$TotRmsAbvGrd)
table(featureMat$Functional)
table(featureMat$Fireplaces)
table(featureMat$FireplaceQu)
sum(is.na(featureMat$FireplaceQu))#/nrow(featureMat)
table(featureMat$GarageYrBlt)
table(featureMat$GarageFinish)
table(featureMat$GarageCars)
table(featureMat$GarageArea)
table(featureMat$WoodDeckSF)
table(featureMat$OpenPorchSF)
table(featureMat$EnclosedPorch)
table(featureMat$ScreenPorch)
table(featureMat$PoolArea)
table(featureMat$PoolQC)
table(featureMat$Fence)
table(featureMat$MiscFeature)
table(featureMat$MiscVal)
table(featureMat$MoSold)
table(featureMat$YrSold)
table(featureMat$SaleType)
table(featureMat$SaleCondition)
is.na(featureMat$SalePrice)
which(is.na(featureMat$SalePrice))
which(is.na(train$SalePrice))
colnames(featureMat)
ncol(featureMat)
i
i=1
is.numeric(featureMat[,i])
i=4
is.numeric(featureMat[,i])
for(i in 4:ncol(featureMat)){
if(is.numeric(featureMat[,i]))
featureMat[,i] <- (featureMat[,i] - mean(featureMat[,i], na.rm = TRUE))/sd(featureMat[,i], na.rm = TRUE)
}
head(featureMat)
is.factor(featureMat[,i])
ConvertNA=function(x){
if(is.factor(x)){
x=as.character(x)
x[is.na(x)]="NONE"
x=as.factor(x)
}
return(x)
}
for(i in 1:nrow(featureMat)){
featureMat[,i] <- ConvertNA(featureMat[,i])
}
ConvertNA=function(x){
if(is.factor(x)){
x=as.character(x)
x[is.na(x)]="NONE"
x=as.factor(x)
}
return(x)
}
for(i in 1:nrow(featureMat)){
featureMat[,i] <- ConvertNA(featureMat[,i])
}
featureMat[,i]
i
nrow(featureMat)
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/Haozhe")
library(randomForest)
library(xgboost)
library(caret)
library(Boruta)
library(glmnet)
train <- read.csv("train.csv", header=TRUE)
test <- read.csv("test.csv", header=TRUE)
train$Train <- 1
train <- train[,c(82,81,1:80)]
test$SalePrice <- NA
test$Train <- 0
test <- test[,c(82,81,1:80)]
featureMat <- rbind(train, test)
###### standardize all the X's
for(i in 4:ncol(featureMat)){
if(is.numeric(featureMat[,i]))
featureMat[,i] <- (featureMat[,i] - mean(featureMat[,i], na.rm = TRUE))/sd(featureMat[,i], na.rm = TRUE)
}
###### Handling missing values
ConvertNA=function(x){
if(is.factor(x)){
x=as.character(x)
x[is.na(x)]="NONE"
x=as.factor(x)
}
return(x)
}
for(i in 1:ncol(featureMat)){
featureMat[,i] <- ConvertNA(featureMat[,i])
}
head(featureMat)
for(i in 1:ncol(featureMat)){
featureMat[,i] <- ConvertNA(featureMat[,i])
if(is.numeric(featureMat[,i])&sum(is.na(featureMat[,i]))>0)
print(colnames(featureMat)[i])
}
is.na(featureMat$LotFrontage)
featureMat$LotFrontage_NA <- as.numeric(is.na(featureMat$LotFrontage))
as.numeric(is.na(featureMat$LotFrontage))
for(i in 1:ncol(featureMat)){
featureMat[,i] <- ConvertNA(featureMat[,i])
if(is.numeric(featureMat[,i])&sum(is.na(featureMat[,i]))>0)
print(colnames(featureMat)[i])
}
featureMat$LotFrontage[is.na(featureMat$LotFrontage)]
featureMat$LotFrontage
featureMat$LotFrontage[is.na(featureMat$LotFrontage)] <- 0
for(i in 1:ncol(featureMat)){
featureMat[,i] <- ConvertNA(featureMat[,i])
if(is.numeric(featureMat[,i])&sum(is.na(featureMat[,i]))>0)
print(colnames(featureMat)[i])
}
featureMat$TotalBsmtSF_NA <- as.numeric(is.na(featureMat$TotalBsmtSF))
featureMat$TotalBsmtSF[is.na(featureMat$TotalBsmtSF)] <- 0
for(i in 1:ncol(featureMat)){
featureMat[,i] <- ConvertNA(featureMat[,i])
if(is.numeric(featureMat[,i])&sum(is.na(featureMat[,i]))>0)
print(colnames(featureMat)[i])
}
featureMat$LotFrontage_NA <- as.numeric(is.na(featureMat$LotFrontage))
featureMat$LotFrontage[is.na(featureMat$LotFrontage)] <- 0
featureMat$MasVnrArea_NA <- as.numeric(is.na(featureMat$MasVnrArea))
featureMat$MasVnrArea[is.na(featureMat$MasVnrArea)] <- 0
featureMat$BsmtFinSF1_NA <- as.numeric(is.na(featureMat$BsmtFinSF1))
featureMat$BsmtFinSF1[is.na(featureMat$BsmtFinSF1)] <- 0
featureMat$BsmtFinSF2_NA <- as.numeric(is.na(featureMat$BsmtFinSF2))
featureMat$BsmtFinSF2[is.na(featureMat$BsmtFinSF2)] <- 0
featureMat$BsmtUnfSF_NA <- as.numeric(is.na(featureMat$BsmtUnfSF))
featureMat$BsmtUnfSF[is.na(featureMat$BsmtUnfSF)] <- 0
featureMat$TotalBsmtSF_NA <- as.numeric(is.na(featureMat$TotalBsmtSF))
featureMat$TotalBsmtSF[is.na(featureMat$TotalBsmtSF)] <- 0
for(i in 1:ncol(featureMat)){
featureMat[,i] <- ConvertNA(featureMat[,i])
if(is.numeric(featureMat[,i])&sum(is.na(featureMat[,i]))>0)
print(colnames(featureMat)[i])
}
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/Haozhe")
library(randomForest)
library(xgboost)
library(caret)
library(Boruta)
library(glmnet)
train <- read.csv("train.csv", header=TRUE)
test <- read.csv("test.csv", header=TRUE)
train$Train <- 1
train <- train[,c(82,81,1:80)]
test$SalePrice <- NA
test$Train <- 0
test <- test[,c(82,81,1:80)]
featureMat <- rbind(train, test)
###### standardize all the X's
for(i in 4:ncol(featureMat)){
if(is.numeric(featureMat[,i]))
featureMat[,i] <- (featureMat[,i] - mean(featureMat[,i], na.rm = TRUE))/sd(featureMat[,i], na.rm = TRUE)
}
###### Handling missing values
ConvertNA=function(x){
if(is.factor(x)){
x=as.character(x)
x[is.na(x)]="NONE"
x=as.factor(x)
}
return(x)
}
for(i in 1:ncol(featureMat)){
featureMat[,i] <- ConvertNA(featureMat[,i])
if(is.numeric(featureMat[,i])&sum(is.na(featureMat[,i]))>0)
print(colnames(featureMat)[i])
}
featureMat$LotFrontage_NA <- as.numeric(is.na(featureMat$LotFrontage))
featureMat$LotFrontage[is.na(featureMat$LotFrontage)] <- 0
featureMat$MasVnrArea_NA <- as.numeric(is.na(featureMat$MasVnrArea))
featureMat$MasVnrArea[is.na(featureMat$MasVnrArea)] <- 0
featureMat$BsmtFinSF1_NA <- as.numeric(is.na(featureMat$BsmtFinSF1))
featureMat$BsmtFinSF1[is.na(featureMat$BsmtFinSF1)] <- 0
featureMat$BsmtFinSF2_NA <- as.numeric(is.na(featureMat$BsmtFinSF2))
featureMat$BsmtFinSF2[is.na(featureMat$BsmtFinSF2)] <- 0
featureMat$BsmtUnfSF_NA <- as.numeric(is.na(featureMat$BsmtUnfSF))
featureMat$BsmtUnfSF[is.na(featureMat$BsmtUnfSF)] <- 0
featureMat$TotalBsmtSF_NA <- as.numeric(is.na(featureMat$TotalBsmtSF))
featureMat$TotalBsmtSF[is.na(featureMat$TotalBsmtSF)] <- 0
featureMat$BsmtFullBath_NA <- as.numeric(is.na(featureMat$BsmtFullBath))
featureMat$BsmtFullBath[is.na(featureMat$BsmtFullBath)] <- 0
featureMat$BsmtHalfBath_NA <- as.numeric(is.na(featureMat$BsmtHalfBath))
featureMat$BsmtHalfBath[is.na(featureMat$BsmtHalfBath)] <- 0
featureMat$GarageArea_NA <- as.numeric(is.na(featureMat$GarageArea))
featureMat$GarageArea[is.na(featureMat$GarageArea)] <- 0
featureMat$GarageYrBlt_NA <- as.numeric(is.na(featureMat$GarageYrBlt))
featureMat$GarageYrBlt[is.na(featureMat$GarageYrBlt)] <- 0
featureMat$GarageCars_NA <- as.numeric(is.na(featureMat$GarageCars))
featureMat$GarageCars[is.na(featureMat$GarageCars)] <- 0
for(i in 1:ncol(featureMat)){
featureMat[,i] <- ConvertNA(featureMat[,i])
if(is.numeric(featureMat[,i])&sum(is.na(featureMat[,i]))>0)
print(colnames(featureMat)[i])
}
head(featureMat)
featureMat$YearRemodAdd_diff_YearBuilt <- featureMat$YearRemodAdd - featureMat$YearBuilt
featureMat$YearRemodAdd_diff_YearBuilt
rm(list = ls())
setwd("~/Documents/KaggleAmesHouse/Haozhe")
library(randomForest)
library(xgboost)
library(caret)
library(Boruta)
library(glmnet)
train <- read.csv("train.csv", header=TRUE)
test <- read.csv("test.csv", header=TRUE)
train$Train <- 1
train <- train[,c(82,81,1:80)]
test$SalePrice <- NA
test$Train <- 0
test <- test[,c(82,81,1:80)]
featureMat <- rbind(train, test)
### create a new covariate "YearRemodAdd - YearBuilt"
featureMat$YearRemodAdd_diff_YearBuilt <- featureMat$YearRemodAdd - featureMat$YearBuilt
###### standardize all the X's
for(i in 4:ncol(featureMat)){
if(is.numeric(featureMat[,i]))
featureMat[,i] <- (featureMat[,i] - mean(featureMat[,i], na.rm = TRUE))/sd(featureMat[,i], na.rm = TRUE)
}
###### Handling missing values
ConvertNA=function(x){
if(is.factor(x)){
x=as.character(x)
x[is.na(x)]="NONE"
x=as.factor(x)
}
return(x)
}
for(i in 1:ncol(featureMat)){
featureMat[,i] <- ConvertNA(featureMat[,i])
#if(is.numeric(featureMat[,i])&sum(is.na(featureMat[,i]))>0)
#print(colnames(featureMat)[i])
}
featureMat$LotFrontage_NA <- as.numeric(is.na(featureMat$LotFrontage))
featureMat$LotFrontage[is.na(featureMat$LotFrontage)] <- 0
featureMat$MasVnrArea_NA <- as.numeric(is.na(featureMat$MasVnrArea))
featureMat$MasVnrArea[is.na(featureMat$MasVnrArea)] <- 0
featureMat$BsmtFinSF1_NA <- as.numeric(is.na(featureMat$BsmtFinSF1))
featureMat$BsmtFinSF1[is.na(featureMat$BsmtFinSF1)] <- 0
featureMat$BsmtFinSF2_NA <- as.numeric(is.na(featureMat$BsmtFinSF2))
featureMat$BsmtFinSF2[is.na(featureMat$BsmtFinSF2)] <- 0
featureMat$BsmtUnfSF_NA <- as.numeric(is.na(featureMat$BsmtUnfSF))
featureMat$BsmtUnfSF[is.na(featureMat$BsmtUnfSF)] <- 0
featureMat$TotalBsmtSF_NA <- as.numeric(is.na(featureMat$TotalBsmtSF))
featureMat$TotalBsmtSF[is.na(featureMat$TotalBsmtSF)] <- 0
featureMat$BsmtFullBath_NA <- as.numeric(is.na(featureMat$BsmtFullBath))
featureMat$BsmtFullBath[is.na(featureMat$BsmtFullBath)] <- 0
featureMat$BsmtHalfBath_NA <- as.numeric(is.na(featureMat$BsmtHalfBath))
featureMat$BsmtHalfBath[is.na(featureMat$BsmtHalfBath)] <- 0
featureMat$GarageArea_NA <- as.numeric(is.na(featureMat$GarageArea))
featureMat$GarageArea[is.na(featureMat$GarageArea)] <- 0
featureMat$GarageYrBlt_NA <- as.numeric(is.na(featureMat$GarageYrBlt))
featureMat$GarageYrBlt[is.na(featureMat$GarageYrBlt)] <- 0
featureMat$GarageCars_NA <- as.numeric(is.na(featureMat$GarageCars))
featureMat$GarageCars[is.na(featureMat$GarageCars)] <- 0
write.csv(featureMat, file="featuerMatrix_v1.csv", row.names = FALSE)
